<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software on Ksfour's Life</title><link>https://Ks4four.github.io/life/software/</link><description>Recent content in Software on Ksfour's Life</description><generator>Hugo</generator><language>en-US</language><copyright>Copyright © 2025, Ksfour.</copyright><lastBuildDate>Fri, 31 Oct 2025 16:41:22 +0000</lastBuildDate><atom:link href="https://Ks4four.github.io/life/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Obsidian</title><link>https://Ks4four.github.io/life/software/obsidian/</link><pubDate>Fri, 31 Oct 2025 16:41:22 +0000</pubDate><guid>https://Ks4four.github.io/life/software/obsidian/</guid><description>&lt;h1 id="obsidian"&gt;Obsidian&lt;/h1&gt;
&lt;p&gt;我从零点几开始就已经使用了 Obsidian。如前所述，那时连 custom CSS 都比较麻烦。我看着它到版本 1，到如今的 bases 版本时代，插件盛行，而且渐渐有许多人知道它的存在。在这一路中，我收获了扁平化管理、非常棒的 UI、和 VSCode 一样良好的编辑体验……哦对了，我还看了许多 Obsidian 的示例库，他们做的东西也非常具有想象力。到后来，有人还推出了 Obsidian 课程。毫无疑问它一直在处于黄金时代，而什么 Notion 开始渐渐变得没有名气了。但是在我电脑上，它只是卡了，有时卡得难以忍受，所以我只能放弃了。&lt;/p&gt;</description></item><item><title>Markdown</title><link>https://Ks4four.github.io/life/software/markdown/</link><pubDate>Fri, 31 Oct 2025 16:40:31 +0000</pubDate><guid>https://Ks4four.github.io/life/software/markdown/</guid><description>&lt;h1 id="markdown"&gt;Markdown&lt;/h1&gt;
&lt;p&gt;我的主力渐渐将 Markdown 转换为 Orgmode，并不是因为我现在就完全不用 Markdown，只是说，我渐渐觉得不那么像之前喜欢它了。在五六年前，我认为我是 Markdown 的忠实粉丝，我在 Obsidian 测试版的时候就使用上它了，那时比较搞笑的是自定义 CSS 好像才刚发布吧？而我当时对 CSS 一窍不通。我高中做的笔记是手写 Markdown 的，这样我就不用手动 indent 来浪费纸张了。&lt;/p&gt;
&lt;p&gt;我在这里先不讨论缺乏标准化这种老生常谈的问题，不然读者点进来干嘛呢？我总要拿出一个拿得出手、有新意的东西来说服读者，对吧？而且还要是它本身的问题，因为世上许多关于 Markdown 的问题，都是关乎读取它的软件导致的，如果我提出这种问题，整篇文章瞬间变得没有说服力，我也将会变成一个 🤡（小丑（这是对这个 emoji 的 alt text））。好在我写下这段话期间，我想到了一个合格的理由。&lt;/p&gt;
&lt;h2 id="syntax-数量太少了"&gt;syntax 数量太少了&lt;/h2&gt;
&lt;p&gt;这是最终的理由，别的理由都是使用软件的事情。它不是说相对于别的 markup 的灵活性，也不是缺少了某些东西。我在社区上见到有人吐槽 Markdown 没有下划线，只能用 HTML 的 &lt;code&gt;&amp;lt;u&amp;gt;&lt;/code&gt;，而这是一种丑陋的 workaround。这种非要用下划线来标注的想法其实可以避免，就是它容易和 hyperlink 混淆，这样你就不会用 &lt;code&gt;&amp;lt;u&amp;gt;&lt;/code&gt; 来替代了。但正是因为得到这种 workaround 就浪费了大家的时间。还有表格内换行，谷歌&lt;a href="https://developers.google.com/style/tables"&gt;有提到过这点&lt;/a&gt;，许多时候没有必要用表格。它实际上是用来展示简短文本，甚至是 emoji 的。ZMK 就是有一个大表上面写着进程计划，上面用三个 emoji 来标注每个功能的开发状态。但是不这么做的人们写出来的表格要在手机上完全往下往右划，或者许多网页有自己的适应性实现，总之表格太大并不是一件好事。&lt;/p&gt;
&lt;p&gt;我的理由就是人类其实不愿意相信他们所有的行为居然能文字化到那么少 syntax 的一种标记语言。Org mode 之所以看起来比 Markdown 好，那是因为它的背后是 Emacs，而 Emacs 是出了名的万能。人类在使用 Org mode 的时候自然会觉得我在这么一个万能的平台下面写东西，我收敛一点安分一点，把格式安排好一点，我不会粗体和斜体整段，甚至用粗斜体+大写字母来警告，而不是用 CSS 渲染出来这种警告。但是当人在使用 Markdown 的时候，会想着「我为什么不能实现这个啊？？？」，然后会想着找一个能实现下划线或者表格换行的笔记软件。但是实际上是 Markdown 限制了人们。我觉得这才是 Markdown 本身的问题，而别的问题，像缺乏标准化，是这个问题引发的而已。&lt;/p&gt;
&lt;h2 id="缺乏标准化这个理由不能成立"&gt;缺乏标准化这个理由不能成立&lt;/h2&gt;
&lt;p&gt;缺乏标准化是老生常谈了。https://karl-voit.at/2017/09/23/orgmode-as-markup-only/ 列举了一些事情。&lt;/p&gt;</description></item><item><title>Neovim</title><link>https://Ks4four.github.io/life/software/neovim/</link><pubDate>Fri, 03 Oct 2025 06:11:12 +0000</pubDate><guid>https://Ks4four.github.io/life/software/neovim/</guid><description>&lt;h1 id="neovim"&gt;Neovim&lt;/h1&gt;
&lt;p&gt;来来回回卸载以后发现我可能真的不适合它。&lt;/p&gt;
&lt;h2 id="modal-editing"&gt;Modal Editing&lt;/h2&gt;
&lt;p&gt;这是我最后决定卸载的理由，所以排第一了。Modal Editing 并不适合我。首先输入法的 IME 本质上是一种 toggle，这种 toggle 是在不同的 layer 之中。Modal Editing 说白了也是用一种 layer。这种交织会把我搞乱，以至于我从来没有成功进入心流状态中。更别说我的 ZMK 也有 layer 了。想象一下在 Neovim 编辑需要考虑什么：先要考虑键盘 toggle 状态，再考虑中英文状态、再考虑是否进入 Insert 模式。虽然这对许多用户来说不是问题，但是对我来说负担太大了。&lt;/p&gt;
&lt;p&gt;中文支持、无法重复（repetition）或没有正反馈这些问题，由于没有具体的真实代码示例，我决定省略它们。&lt;/p&gt;
&lt;h2 id="leader-key"&gt;Leader Key&lt;/h2&gt;
&lt;p&gt;Leader Key 对我来说是启发性的。&lt;/p&gt;
&lt;p&gt;在接触 Neovim 之前，我从来没有想过能这么操作文本（或者不是文本）的东西。QMK 和 ZMK 都已经是之后的事情了，是我搜索了才发现它们有自己的 Leader Key 实现。&lt;/p&gt;
&lt;p&gt;运用 Leader Key 可以根据语义编写快捷键。一般来说，Leader Key 后面跟着的是两个，少有三个，而且实践中都是 &lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;major scope&amp;gt;&amp;lt;minor scope&amp;gt;&lt;/code&gt;。我（Gemini 2.5）写了一个 Leader Key（&lt;code&gt;F24&lt;/code&gt;）的 AHK 脚本，非常舒服。&lt;/p&gt;
&lt;p&gt;顺带一提，QMK 把它定义为修饰键的一种。这是比较有意思的。在我看来所有行为都分为三种，第一种是非常常用的，比如 undo。第二种是不常用的，偶尔想起来用一下，比如 Photoshop 一些没人用的古老滤镜。而在这之间是第三种常用但是不够第一种常用的，比如说 split window、关闭倒数第四个窗口之类。这第三种就要用到 Leader Key。&lt;/p&gt;
&lt;p&gt;Leader Key 让我认为不能用一种方案来解决所有事情（one-shot mod），而要根据不同事情决定最优方案。我们一定要有保底的方案，这其中除了 GUI 和 TUI 以外，对于键盘操作上我特别赞成 omni-，一种例子就是 omnibar。没有 omnibar 我们完全无法得到快速操作第二种不常用的快捷方式，我觉得这不是一种关乎极简的设计（当然极简也不错），它只是碰巧极简了。现代软件有许多 omnibar，比如 VSCode 的 Command Palette，Obsidian 也有一个，甚至 Windows 的 explorer.exe 也是（它可以输入 SFTP 和 FTP 地址，而非总是文件夹路径）。&lt;/p&gt;</description></item></channel></rss>